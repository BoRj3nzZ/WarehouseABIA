package warehousePBL;

import java.util.concurrent.Semaphore;

public class Barrier {

	Semaphore sEntry, sMutEx, sExit;
	int nTaskInBarrier;
	int N;
	
	public Barrier(int nEntry) {
		sEntry = new Semaphore(nEntry, true);
		sMutEx = new Semaphore(1, true);
		sExit = new Semaphore(0, true);
		nTaskInBarrier = 0;
		N = nEntry;
	}
	
	void waitInBarrier(){
	  int x;

	  //sem_wait(&pBarrier->sEntry);
	  //sem_wait(&pBarrier->sMutEx);
	  x=++nTaskInBarrier;
	  sem_post(&pBarrier->sMutEx);
	  if (x< (pBarrier->taskInBarrier)) sem_wait(&pBarrier->sExit);
	  else
	  {
	    for(int i=0;i<(pBarrier->N)-1;i++)
	    {
	      sem_post(&pBarrier->sExit);
	    }
	  }
	  sem_wait(&pBarrier->sMutEx);
	  x=--taskInBarrier;
	  sem_post(&pBarrier->sMutEx);
	  if (x==0) 
	  {    
	    for(int i=0;i<(pBarrier->N);i++)
	    {
	      sem_post(&pBarrier->sEntry);
	    }
	  }
	}
}
